{"ts":1347017772849,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# -*- coding: UTF-8 -*-\n\nimport os\nimport time\nclass Table:\n\t\"\"\"Crear nueva base de datos\"\"\"\n\tdef __init__(self):\n\t\tself.metadata = {}\n\t\tself.bd = {}\n\t\tself.lastItem = 0\n\n#éstá\n\n\tdef defNombreAttr(self):\n\t\t\"\"\"Obtener nombre del nuevo campo\"\"\"\n\t\tnombre = raw_input(\"Nombre del nuevo campo: \")\n\t\ttry:\n\t\t\tnombre = str(nombre)\n\t\texcept ValueError:\n\t\t\tprint \"Valor no valido\"\n\t\t\ttime.sleep(1)\n\t\t\tnombre = self.defNombreAttr()\n\n\t\tif self.metadata.has_key(nombre):\n\t\t\tprint \"Ese campo ya existe, intenta con otro\"\n\t\t\ttime.sleep(1)\n\t\t\tnombre = self.defNombreAttr()\n\n\t\treturn nombre\n\n\n\tdef defTipo(self):\n\t\t\"\"\"Obtener tipo de dato en nuevo campo\"\"\"\n\t\ttipo = raw_input(\"Tipo de dato del nuevo campo [int,float,string]: \")\n\t\ttry:\n\t\t\t\n\t\t\ttipo = tipo.lower()\n\t\t\tif(tipo == \"int\" or tipo == \"float\" or tipo == \"string\"):\n\t\t\t\ttipo = str(tipo)\n\t\t\telse:\n\t\t\t\tprint \"Valor no valido\"\n\t\t\t\ttime.sleep(1)\n\t\t\t\ttipo = self.defTipo()\n\n\t\texcept ValueError:\n\t\t\tprint \"Valor no valido\"\n\t\t\ttime.sleep(1)\n\t\t\ttipo = self.defTipo()\n            \n\t\treturn tipo\n        \n\n\tdef agregarCampo(self):\n\t\t\"\"\" Agregar un nuevo atributo a la tabla \"\"\"\n\t\tos.system(\"clear\")\n\n\t\tnombre = self.defNombreAttr()\n\t\ttipo = self.defTipo()\n\t\tself.metadata[nombre] = tipo\n\n\t\ttry:\n\t\t\tfor r in self.bd:\n\t\t\t\tfor i in range(len(self.bd[r])):\n\t\t\t\t\tself.bd[r].append([nombre,None])\n\n\t\texcept ValueError:\n\t\t\tprint \"Error critico, adios! :(\"\n\t\t\ttime.sleep(1)\n\t\t\tself.menu()\n\n\n\t\tprint \"Configuracion Guardada\"\n\t\ttime.sleep(1)\n\t\tself.menu()\n\n\tdef regValue(self,campo,tipo):\n\t\t\"\"\"Obtener del usuario valor a agregar al campo\"\"\"\n\t\tvalue = raw_input(\"Introduce el valor para %s (%s): \" % (campo,tipo))\n\t\ttipo = tipo.lower()\n\t\ttry:\n\t\t\tif tipo == \"int\":\n\t\t\t\tint(value)\n\t\t\telif tipo == \"float\":\n\t\t\t\tfloat(value)\n\t\t\telif tipo == \"string\":\n\t\t\t\tstr(tipo)\n\t\texcept ValueError:\n\t\t\tprint \"Valor no valido debe ser de tipo \",tipo\n\t\t\ttime.sleep(1)\n\t\t\tvalue = self.regValue(campo,tipo)\n\n\t\treturn value\n\n\tdef agregarRegistro(self):\n\t\t\"\"\"Agregar nuevo registro\"\"\"\n\t\tos.system(\"clear\")\n\n\t\tif len((self.metadata).keys()) <= 0:\n\t\t\tprint \"Debes definir por lo menos un atributo\"\n\t\t\ttime.sleep(1)\n\t\t\tself.menu()\n\t\t\treturn None\n\n\t\tnewReg = []\n\t\tln = self.lastItem + 1\n\n\t\tprint \"Estas agregando el elemento [\", ln,\"] \\n\\t\"\n\t\tfor r in self.metadata:\n\t\t\tdato = self.regValue(r,self.metadata[r])\n\t\t\tnewReg.append([r,dato])\n\t\ttry:\n\t\t\tself.bd[ln] = newReg\n\t\texcept ValueError:\n\t\t\tprint \"Error critico,vuelve a intentar! :(\"\n\t\t\ttime.sleep(1)\n\t\t\tself.menu()\n\n\t\tself.lastItem = self.lastItem + 1\n\t\tprint \"Registro agregado\"\n\t\ttime.sleep(1)\n\t\tself.menu()\n\n\tdef rawString(self,cad):\n\t\t\"\"\"Obtener una cadena string\"\"\"\n\t\tmyStr= raw_input(\"Introduce %s (debe ser STRING): \" % cad)\n\n\t\ttry:\n\t\t\tmyStr= str(myStr)\n\t\texcept ValueError:\n\t\t\tprint \"Valor no valido debe ser de tipo STRING (CADENA)\"\n\t\t\ttime.sleep(1)\n\t\t\tmyStr = self.rawString(cad)\n\n\t\treturn myStr\n\n\tdef rawInt(self,cad):\n\t\t\"\"\"Obtener tipo de dato entero\"\"\"\n\t\tmyInt = raw_input(\"Introduce %s (debe ser INT): \" % cad)\n\n\t\ttry:\n\t\t\tmyInt = int(myInt)\n\t\texcept ValueError:\n\t\t\tprint \"Valor no valido debe ser de tipo INT (ENTERO)\"\n\t\t\ttime.sleep(1)\n\t\t\tmyInt = self.rawInt(cad)\n\n\t\treturn myInt\n\n\tdef eliminarAtributo(self):\n\t\t\"\"\"Obtener valor de un campo\"\"\"\n\t\tos.system(\"clear\")\n\t\tkey = self.rawString(\"el nombre del atributo que deseas eliminar\")\n\n\t\tif(not (self.metadata.has_key(key)) ):\n\t\t\tprint \"Atributo no encontrado\"\n\t\t\ttime.sleep(1)\n\t\t\tself.menu()\n\n\t\tfor r in self.bd:\n\t\t\tfor i in range(len(self.bd[r])):\n\t\t\t\tif self.bd[r][i-1][0]  == key:\n\t\t\t\t\tv = self.bd[r][i-1][1]\n\t\t\t\t\tself.bd[r].remove([key,v])\n\t\t\t\t\t\n\n\t\tprint \"Atributo Borrado\"\n\t\ttime.sleep(2)\n\t\tself.menu()\n\n\tdef modificarDato(self):\n\t\t\"\"\"Modificar un Dato\"\"\"\n\t\tos.system(\"clear\")\n\t\tkey = self.rawInt(\"la clave del elemento que deseas modificar\")\n\n\t\tif(not (self.bd.has_key(key)) ):\n\t\t\tprint \"Registro no encontrado\"\n\t\t\ttime.sleep(1)\n\t\t\tself.menu()\n\n\t\tfield = self.rawString(\"el nombre del campo a modificar\")\n\t\t\n\t\tvalor = self.regValue(field,self.metadata[field])\n\t\tflag = False\n\t\tif self.metadata.has_key(field):\n\t\t\tfor i in range(len(self.bd[key])):\n\t\t\t\tif self.bd[key][i-1][0]  == field:\n\t\t\t\t\tself.bd[key][i-1][1] = valor\n\t\t\t\t\tbreak\n\t\telse:\n\t\t\tprint \"No existe ese campo\"\n\t\t\ttime.sleep(1)\n\t\t\tself.menu()\n\n\t\tself.menu()\n\n\tdef eliminarRegistro(self):\n\t\t\"\"\"Eliminar un registro de la tabla\"\"\"\n\t\tos.system(\"clear\")\n\t\tkey = self.rawInt(\"la clave del elemento que deseas eliminar\")\n\t\tif(self.bd.has_key(key)):\n\t\t\tdel self.bd[key]\n\t\t\tprint \"Registro eliminado\"\n\t\telse:\n\t\t\tprint \"No existe ese registro\"\n\t\t\ttime.sleep(1)\n\t\t\tself.menu()\n\n\t\tself.menu()\n\n\tdef buscarRegistro(self):\n\t\t\"\"\"Buscar un registro en la tabla\"\"\"\n\t\tos.system(\"clear\")\n\t\tkey = self.rawInt(\"la clave del elemento que buscas\")\n\n\t\tif(not (self.bd.has_key(key)) ):\n\t\t\tprint \"Registro no encontrado\"\n\t\t\ttime.sleep(1)\n\t\t\tself.menu()\n\t\telse:\n\t\t\tfor d in range(len(self.bd[key])):\n\t\t\t\tprint self.bd[key][d-1][0],\" = \",self.bd[key][d-1][1]\n\n\t\tos.system(\"pause\")\n\t\tself.menu()\n\n\tdef eliminarDB(self):\n\t\t\"\"\"Eliminar datos y metadata\"\"\"\n\t\tos.system(\"clear\")\n\t\tself.bd.clear()\n\t\tself.metadata.clear()\n\n\t\tprint \"Informacion eliminada\"\n\t\ttime.sleep(1)\n\t\tself.menu()\n\n\tdef eliminarRegistros(self):\n\t\t\"\"\"Eliminar solamente los registros, se conserva metadata\"\"\"\n\t\tos.system(\"clear\")\n\t\tself.bd = {}\n\n\t\tprint \"Registros Eliminados\"\n\t\ttime.sleep(1)\n\t\tself.menu()\n\n\tdef imprimirMD(self):\n\t\t\"\"\"Imprimir metadata (no implemetada)\"\"\"\n\t\tfor r in self.metadata:\n\t\t\tprint self.metadata[r]\n\n\t\tos.system(\"pause\")\n\t\tself.menu()\n\n\tdef imprimirBD(self):\n\t\t\"\"\"Imprimir Tabla\"\"\"\n\t\tif len((self.bd).keys()) <= 0:\n\t\t\tprint \"Debes agregar por lo menos un registro primero\"\n\t\t\ttime.sleep(1)\n\t\t\tself.menu()\n\t\t\treturn None\n\n\t\tfor r in self.bd:\n\t\t\tprint \"> Registro [\",r,\"]\"\n\t\t\tfor i in range(len(self.bd[r])):\n\t\t\t\tprint \"\\t\",self.bd[r][i-1][0],\" = \",self.bd[r][i-1][1]\n\n\t\tprint \"\\n\\n\"\t\t\n\t\tos.system(\"pause\")\n\t\tself.menu()\n\n\n\tdef escribirArchivo(self):\n\t\t\"\"\"Escribir toda la tabla logica, en la tabla\"\"\"\n\t\tf = open('db.txt','w')\n\t\tf2f = []\n\t\tfor r in self.bd:\n\t\t\tf.seek(0,2)\n\t\t\tf.write(\"\\n\\n> Registro [\" + str(r)+ \"]\")\n\t\t\tfor i in range(len(self.bd[r])):\n\t\t\t\tf.seek(0,2)\n\t\t\t\tf.write(\"\\n\\t\" + str(self.bd[r][i-1][0]) + \" => \" + str(self.bd[r][i-1][1]))\n\n\n\tdef menu(self):\n\t\t\"\"\"Ibidem\"\"\"\n\t\t#os.system(\"clear\")\n\t#\tself.escribirArchivo()\n\t\tprint \"\"\"\nBIENVENIDO!  \nElige la opcion que desees\n  [1] Agregar nuevo campo\n  [2] Agregar registro\n  [3] Modificar dato\n  [4] Eliminar Registro\n  [5] Buscar\n  [6] Eliminar BD\n  [7] Imprimir DB\n  [8] Eliminar TODOS los registros\n  [9] Eliminar atributo\n  [10+] Salir\n\t\"\"\"\n\n\t\top = raw_input(\"\\t Escribe la opcion: \")\n\n\t\ttry:\n\t\t\top = int(op)\n\t\texcept ValueError:\n\t\t\tprint \"El valor no introducido no es valido\"\n\t\t\ttime.sleep(1)\n\t\t\tself.menu()\n\n\t\tif op == 1:\n\t\t\tself.agregarCampo()\n\t\telif op == 2:\n\t\t\tself.agregarRegistro()\n\t\telif op == 3:\n\t\t\tself.modificarDato()\n\t\telif op == 4:\n\t\t\tself.eliminarRegistro()\n\t\telif op == 5:\n\t\t\tself.buscarRegistro()\n\t\telif op == 6:\n\t\t\tself.eliminarDB()\n\t\telif op == 7:\n\t\t\tself.imprimirBD()\n\t\telif op == 8:\n\t\t\tself.eliminarRegistros()\n\t\telif op == 9:\n\t\t\tself.eliminarAtributo()\n\t\telif op >= 10 or op <= 0:\n\t\t\tprint \"Adios!\"\n\t\t\ttime.sleep(1)\n\t\t\texit()\n\n\n\nt1 = Table()\n\nt1.menu()"]],"start1":0,"start2":0,"length1":0,"length2":7180}]],"length":7180}
